/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package Assignment.VendorClass;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author chanw
 */
public class Vendor_FoodMenu extends javax.swing.JFrame {
    private String username;
    /**
     * Creates new form Vendor_FoodMenu
     */
    public Vendor_FoodMenu() {
        initComponents();       
    }
    
    public Vendor_FoodMenu(String currentUsername) {
        username = currentUsername;
        initComponents();
        lblUsername.setText("Name: "+username);
        loadTable();       
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        btnBack = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        txtName = new javax.swing.JTextField();
        txtQuantity = new javax.swing.JTextField();
        txtPrice = new javax.swing.JTextField();
        btnAdd = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblMenu = new javax.swing.JTable();
        btnDelete = new javax.swing.JButton();
        btnUpdate = new javax.swing.JButton();
        lblUsername = new javax.swing.JLabel();

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(jTable1);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        btnBack.setText("Back");
        btnBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackActionPerformed(evt);
            }
        });

        jLabel1.setText("Food Name: ");

        jLabel2.setText("Quantity:");

        jLabel3.setText("Price:");

        txtQuantity.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtQuantityActionPerformed(evt);
            }
        });

        btnAdd.setText("Add");
        btnAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddActionPerformed(evt);
            }
        });

        tblMenu.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Food Name", "Title Quantity", "Price"
            }
        ));
        tblMenu.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblMenuMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(tblMenu);

        btnDelete.setText("Delete");
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });

        btnUpdate.setText("Update");
        btnUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateActionPerformed(evt);
            }
        });

        lblUsername.setText("(NAME)");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(17, 17, 17)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(btnBack)
                        .addGroup(layout.createSequentialGroup()
                            .addGap(53, 53, 53)
                            .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 61, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(btnAdd)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(12, 12, 12)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(txtName)
                            .addComponent(txtQuantity)
                            .addComponent(txtPrice, javax.swing.GroupLayout.PREFERRED_SIZE, 189, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(btnDelete)
                        .addGap(18, 18, 18)
                        .addComponent(btnUpdate)))
                .addGap(35, 35, 35)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 327, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblUsername))
                .addContainerGap(35, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(12, 12, 12)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnBack)
                        .addGap(71, 71, 71)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1)
                            .addComponent(txtName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(txtQuantity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel3)
                            .addComponent(txtPrice, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(41, 41, 41)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnAdd)
                            .addComponent(btnDelete)
                            .addComponent(btnUpdate)))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(lblUsername)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 241, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(76, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    private static final String DATA_FILE = "food_menu.txt";
    private DefaultTableModel tblModel;

    private void loadTable() {
        boolean isNameCorrect = false;
        DefaultTableModel tblModel = (DefaultTableModel) tblMenu.getModel();

        try (BufferedReader br = new BufferedReader(new FileReader(DATA_FILE))) {
            String line;
            String currentVendor = null;

            while ((line = br.readLine()) != null) {
                if (line.startsWith("Vendor:")) {
                    currentVendor = line.substring(7).trim();
                    if (currentVendor.equals(username)) { //vendor name hereeeeeeeeeee, need to include when eric finish the registration
                        isNameCorrect = true;
                    } else {
                        isNameCorrect = false;
                    }
                } else if (isNameCorrect) {
                    String[] parts = line.split(",");
                    if (parts.length == 3) {
                        String name = parts[0];
                        String quantity = parts[1];
                        String price = parts[2];
                        tblModel.addRow(new String[]{name, quantity, price});
                    }
                }
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "This is not working."+e);
        }
    }
    
    private void txtQuantityActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtQuantityActionPerformed

    }//GEN-LAST:event_txtQuantityActionPerformed

    private void btnAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddActionPerformed
        if (txtName.getText().isEmpty() || txtQuantity.getText().isEmpty() || txtPrice.getText().isEmpty()) {
            JOptionPane.showMessageDialog(this, "Please fill in all the fields.");
        } else {
            String name = txtName.getText();
            String quantity = txtQuantity.getText();
            String price = txtPrice.getText();
            String foodItem = name + "," + quantity + "," + price;

            boolean isVendorFound = false;

            try (BufferedReader br = new BufferedReader(new FileReader(DATA_FILE))) {
                List<String> lines = new ArrayList<>();

                String line;
                while ((line = br.readLine()) != null) {
                    if (isVendorFound) {
                        lines.add(foodItem);
                        isVendorFound = false; // Reset the flag
                    }

                    if (line.startsWith("Vendor:")) {
                        // Check if the vendor name matches the current user's username
                        if (line.substring(7).trim().equals(username)) {
                            isVendorFound = true;
                        }
                }

                lines.add(line);
            }

                // Rewrite the data file with updated lines
                try (BufferedWriter bw = new BufferedWriter(new FileWriter(DATA_FILE))) {
                    for (String updatedLine : lines) {
                        bw.write(updatedLine);
                        bw.newLine();
                    }
                }
            } catch (IOException e) {
                JOptionPane.showMessageDialog(this, "An error occurred while adding the food item.");
                e.printStackTrace();
            }

            // Update the table with the new food item
            DefaultTableModel tblModel = (DefaultTableModel) tblMenu.getModel();
            tblModel.addRow(new String[]{name, quantity, price});

            // Clear the input fields
            txtName.setText("");
            txtQuantity.setText("");
            txtPrice.setText("");
    }
    }//GEN-LAST:event_btnAddActionPerformed

    private void btnBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackActionPerformed
        Vendor_MainMenu mm = new Vendor_MainMenu(username);
        mm.setVisible(true);
        this.dispose();

    }//GEN-LAST:event_btnBackActionPerformed

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
        //get jtable model first
        DefaultTableModel tblModel = (DefaultTableModel) tblMenu.getModel();
        
        //delete row
        if(tblMenu.getSelectedRowCount()==1){
            //if single row is selected than delete
            tblModel.removeRow(tblMenu.getSelectedRow());
            
        }else{
            if(tblMenu.getRowCount()==0){
                 //if table is empty(no data ) than display message
                JOptionPane.showMessageDialog(this, "Table is empty.");
            } else{
                //if table is not empthy but row is not selected or multiple row is selected
                JOptionPane.showMessageDialog(this,"Pease select a single row for delete");
            }
               
        }
    }//GEN-LAST:event_btnDeleteActionPerformed

    private void btnUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateActionPerformed
        DefaultTableModel tblModel = (DefaultTableModel) tblMenu.getModel();
        String selectName = tblModel.getValueAt(tblMenu.getSelectedRow(), 0).toString();
        String selectQuantity = tblModel.getValueAt(tblMenu.getSelectedRow(), 1).toString();
        String selectPrice = tblModel.getValueAt(tblMenu.getSelectedRow(), 2).toString();

        if (txtName.getText().isEmpty() || txtQuantity.getText().isEmpty() || txtPrice.getText().isEmpty()) {
            JOptionPane.showMessageDialog(this, "Please fill in all the fields.");
        } else {
            String name = txtName.getText();
            String quantity = txtQuantity.getText();
            String price = txtPrice.getText();

            String selectedFoodItem = selectName + "," + selectQuantity + "," + selectPrice;
            String updatedFoodItem = name + "," + quantity + "," + price;
            
            boolean isVendorFound = false;
            boolean insideVendorSection = false;

            try (BufferedReader br = new BufferedReader(new FileReader(DATA_FILE))) {
                List<String> lines = new ArrayList<>();
                String line;
                while ((line = br.readLine()) != null) {
                    if (line.startsWith("Vendor:")) {
                        if (line.substring(7).trim().equals(username)) {
                            isVendorFound = true;
                        }
                        insideVendorSection = isVendorFound;
                    }
                    if (insideVendorSection) {
                        if (line.equals(selectedFoodItem)) {
                            // Replace the selected item with the updated item
                            lines.add(updatedFoodItem);
                        } else {
                            lines.add(line);
                        }
                    } else {
                        lines.add(line);
                    }
                }
            } catch (IOException e) {
                JOptionPane.showMessageDialog(this, "An error occurred while updating the food item.");
                e.printStackTrace();
            }

            // Clear the input fields
            txtName.setText("");
            txtQuantity.setText("");
            txtPrice.setText("");
            
            loadTable();
    } 
    }//GEN-LAST:event_btnUpdateActionPerformed

    private void tblMenuMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblMenuMouseClicked
        DefaultTableModel tblModel = (DefaultTableModel) tblMenu.getModel();
        
        String selectName = tblModel.getValueAt(tblMenu.getSelectedRow(),0).toString();
        String selectQuantity = tblModel.getValueAt(tblMenu.getSelectedRow(),1).toString();
        String selectPrice = tblModel.getValueAt(tblMenu.getSelectedRow(),2).toString();
        
        txtName.setText(selectName);
        txtQuantity.setText(selectQuantity);
        txtPrice.setText(selectPrice);
    }//GEN-LAST:event_tblMenuMouseClicked

    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Vendor_FoodMenu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Vendor_FoodMenu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Vendor_FoodMenu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Vendor_FoodMenu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Vendor_FoodMenu().setVisible(true);
                
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAdd;
    private javax.swing.JButton btnBack;
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnUpdate;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable jTable1;
    private javax.swing.JLabel lblUsername;
    private javax.swing.JTable tblMenu;
    private javax.swing.JTextField txtName;
    private javax.swing.JTextField txtPrice;
    private javax.swing.JTextField txtQuantity;
    // End of variables declaration//GEN-END:variables
}
